<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="7/23/2016 4:11:40 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DESKTOP01"
  DTS:CreatorName="DESKTOP01\randal"
  DTS:DTSID="{A11E27EE-A554-4E3A-9869-FB3DE86B3C6D}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="12.0.4100.1"
  DTS:LocaleID="1033"
  DTS:ObjectName="ResetDWDatabase"
  DTS:PackageType="5"
  DTS:VersionBuild="3"
  DTS:VersionGUID="{9072690F-7B10-4617-925E-A08E450E9B65}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[localhost.DWAdventureWorksLT2012v1ADONET]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{F973DB0D-7B90-4AA6-93E7-7C10A3593D6A}"
      DTS:ObjectName="localhost.DWAdventureWorksLT2012v1ADONET">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=localhost;Initial Catalog=DWAdventureWorksLT2012v1;Integrated Security=True;Application Name=SSIS-DemoPackage-{F973DB0D-7B90-4AA6-93E7-7C10A3593D6A}localhost.DWAdventureWorksLT2012v11;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\RESET THE DW Database Execute SQL Task"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{36963f0f-fcf5-4333-899a-4a508f608648}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="RESET THE DW Database Execute SQL Task"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{F973DB0D-7B90-4AA6-93E7-7C10A3593D6A}"
          SQLTask:SqlStatementSource="--****************** [DWAdventureWorksLT2012v1] *********************--&#xA;-- This file will drop and create the DWAdventureWorksLT2012v1&#xA;-- database, with all its objects. &#xA;--********************************************************************--&#xA;&#xA;USE [master];&#xA;If Exists (Select Name from SysDatabases Where Name = 'DWAdventureWorksLT2012v1')&#xA;  Begin&#xA;   Alter database DWAdventureWorksLT2012v1 set single_user with rollback immediate;&#xA;   Drop database DWAdventureWorksLT2012v1;&#xA;  End&#xA;go&#xA;CREATE DATABASE DWAdventureWorksLT2012v1;&#xA;go&#xA;USE DWAdventureWorksLT2012v1;&#xA;go&#xA;&#xA;--********************************************************************--&#xA;-- Create the Tables&#xA;--********************************************************************--&#xA;--  Create a Null Lookup table:&#xA;CREATE -- Lookup Null Statuses&#xA;TABLE ETLNullStatuses &#xA;( NullStatusID int Not Null  &#xA;, NullStatusDateKey date -- date = YYYY-MM-DD between 0001-01-01 through 9999-12-31&#xA;, NullStatusName nvarchar (50)&#xA;, NullStatusDescription nvarchar (1000)&#xA;CONSTRAINT [pkETLNullStatuses]  PRIMARY KEY Clustered (NullStatusID desc)&#xA;);&#xA;go&#xA;&#xA;--  Fill Null Lookup Table&#xA;INSERT -- Lookup data&#xA;INTO [DWAdventureWorksLT2012v1].[dbo].[ETLNullStatuses]&#xA;( NullStatusID&#xA;, NullStatusDateKey&#xA;, NullStatusName&#xA;, NullStatusDescription&#xA;) &#xA;VALUES&#xA;   (-1,'9999-12-31','Unavaliable', 'Value is currently unknown, but should be available later')&#xA; , (-2,'0001-01-01','Not Applicable', 'A value is not applicable to this item')&#xA; , (-3,'0001-01-02','Unknown', 'Value is currently unknown, but may be available later')&#xA; , (-4,'0001-01-03','Corrupt', 'Original value appeared corrupt or suspicious. As such it was removed from the reporting data')&#xA; , (-5,'0001-01-04','Not Defined', 'A value could be entered, but the source data has not yet defined it')&#xA;;&#xA;go&#xA;&#xA;-- Create Date Dimension Lookup Table:&#xA;CREATE -- Dates Dimension  &#xA;TABLE DimDates &#xA;( CalendarDateKey int Not Null CONSTRAINT [pkDimDates] PRIMARY KEY&#xA;, CalendarDateName nvarchar(50) Not Null &#xA;, CalendarYearMonthID int Not Null &#xA;, CalendarYearMonthName nvarchar(50) Not Null &#xA;, CalendarYearQuarterID int Not Null &#xA;, CalendarYearQuarterName nvarchar(50) Not Null &#xA;, CalendarYearID int Not Null &#xA;, CalendarYearName nvarchar(50) Not Null&#xA;, CalendarDate Date Not Null  &#xA;, FiscalDate Date Not Null &#xA;);&#xA;go&#xA;&#xA;-- Fill DimDates Lookup Table&#xA;-- Step a: Declare variables use in processing&#xA;SET NOCOUNT ON;&#xA;Declare @StartDate date; &#xA;Declare @EndDate date;&#xA;&#xA;-- Step b:  Fill the variable with values for the range of years needed&#xA;Select @StartDate = '01-01-' + Cast(Year(Min([OrderDate])) as nvarchar(50))&#xA; From [AdventureWorksLT2012].[SalesLT].[SalesOrderHeader]; &#xA;Select @EndDate = '12-31-' + Cast(Year(Max([OrderDate]))  as nvarchar(50))&#xA; From [AdventureWorksLT2012].[SalesLT].[SalesOrderHeader];&#xA;&#xA;-- Step c:  Use a while loop to add dates to the table&#xA;Declare @DateInProcess datetime = @StartDate;&#xA;&#xA;While @DateInProcess &lt;= @EndDate&#xA; Begin&#xA; --Add a row into the date dimension table for this date&#xA;  Insert Into [DWAdventureWorksLT2012v1].[dbo].[DimDates] &#xA;  ( [CalendarDateKey]&#xA;  , [CalendarDateName]&#xA;  , [CalendarYearMonthID]&#xA;  , [CalendarYearMonthName]&#xA;  , [CalendarYearQuarterID]&#xA;  , [CalendarYearQuarterName]&#xA;  , [CalendarYearID]&#xA;  , [CalendarYearName]&#xA;  , [CalendarDate]&#xA;  , [FiscalDate]&#xA;  )&#xA;  Values ( &#xA;    Convert(nvarchar(50), @DateInProcess, 112) -- [CalendarDateKey]&#xA;  , DateName( weekday, @DateInProcess ) + ', ' + Convert(nvarchar(50), @DateInProcess, 110) --  [CalendarDateName]&#xA;  , Left(Convert(nvarchar(50), @DateInProcess, 112), 6) -- [CalendarYearMonthKey]&#xA;  , DateName( month, @DateInProcess ) -- [CalendarYearMonthName]&#xA;  , Cast( Year(@DateInProcess) as nVarchar(50)) + '0' + DateName( quarter, @DateInProcess)   --[CalendarYearQuarterKey]&#xA;  , 'Q' + DateName( quarter, @DateInProcess ) + ' - ' + Cast( Year(@DateInProcess) as nVarchar(50)) --[CalendarYearQuarterName]&#xA;  , Year( @DateInProcess ) -- [CalendarYearKey] &#xA;  , Cast( Year( @DateInProcess) as nVarchar(50) ) -- [CalendarYearName]&#xA;  , Convert([Date], @DateInProcess)  -- [FiscalDateKey]       &#xA;  , Convert([Date], DateAdd(mm,-6,@DateInProcess))  -- [FiscalDateKey] &#xA;  );  &#xA;  -- Add a day and loop again&#xA;  Set @DateInProcess = DateAdd(d, 1, @DateInProcess);&#xA; End&#xA;SET NOCOUNT ON;&#xA;go&#xA;&#xA;-- Create Other Dimension Tables:&#xA;CREATE &#xA;TABLE [dbo].[DimProducts]&#xA;( ProductKey int NOT NULL Primary Key IDENTITY(1, 1)&#xA;, [ProductID] [int]  NOT NULL&#xA;, [ProductName]  nvarchar(50) NOT NULL&#xA;, [ProductColor] nvarchar(50) NOT NULL&#xA;, [ProductSize] nvarchar(50) NOT NULL&#xA;, [ProductSellingStartDate] date NOT NULL&#xA;, [ProductSellingEndDate] date NOT NULL &#xA;, [ProductSellingEndDateText] nvarchar(50) NOT NULL&#xA;, [ProductCategoryID] int Not Null&#xA;, [ProductCategoryName] nvarchar(50) Not Null&#xA;, [ParentProductCategoryName] nvarchar(50) Not Null&#xA;)&#xA;;&#xA;&#xA;If (object_id('DimCustomers') is not null) Drop Table DimCustomers;&#xA;go&#xA;&#xA;CREATE&#xA;TABLE DimCustomers&#xA;( CustomerKey int NOT NULL Primary Key IDENTITY(1, 1)&#xA;, [CustomerID] int Not Null &#xA;, [ContactFullName] nvarchar(200) Not Null&#xA;, [CompanyName] nvarchar(200) Not Null&#xA;, [SalesPersonAlias] nvarchar(200) Not Null&#xA;);&#xA;go&#xA;&#xA;-- Create Fact Tables:&#xA;If (object_id('FactSales') is not null) Drop Table FactSales;&#xA;go&#xA;CREATE TABLE [dbo].[FactSales]&#xA;( [SalesOrderID] [int] NOT NULL&#xA;, [SalesOrderDetailID] [int] NOT NULL&#xA;, [OrderDateKey] [int] NOT NULL&#xA;, [ShipDateKey] [int] NOT NULL&#xA;, [CustomerKey] [int] NOT NULL&#xA;, [ProductKey] [int] NOT NULL&#xA;, [OrderQty] [smallint] NOT NULL&#xA;, [UnitPrice] [money] NOT NULL&#xA;, [UnitPriceDiscount] [money] NOT NULL&#xA; CONSTRAINT [pk FactSales] PRIMARY KEY&#xA; ( [SalesOrderID]&#xA; , [SalesOrderDetailID]&#xA; , [OrderDateKey]&#xA; , [ShipDateKey] &#xA; , [CustomerKey]&#xA; , [ProductKey]&#xA; ) &#xA;);&#xA;go&#xA;&#xA;--********************************************************************--&#xA;-- Create the Foreign Key CONSTRAINTs&#xA;--********************************************************************--&#xA;ALTER TABLE dbo.FactSales ADD CONSTRAINT&#xA; fkFactSalesToDimProducts FOREIGN KEY (ProductKey) &#xA; REFERENCES dbo.DimProducts (ProductKey);&#xA;go&#xA;&#xA;ALTER TABLE dbo.FactSales ADD CONSTRAINT &#xA; fkFactSalesToDimCustomers FOREIGN KEY (CustomerKey) &#xA; REFERENCES dbo.DimCustomers (CustomerKey);&#xA;go&#xA;&#xA;ALTER TABLE dbo.FactSales ADD CONSTRAINT&#xA; fkFactSalesOrderDateToDimDates FOREIGN KEY (OrderDateKey) &#xA; REFERENCES dbo.DimDates(CalendarDateKey);&#xA;go&#xA;&#xA;ALTER TABLE dbo.FactSales ADD CONSTRAINT&#xA; fkFactSalesShipDateDimDates FOREIGN KEY (ShipDateKey)&#xA; REFERENCES dbo.DimDates (CalendarDateKey);&#xA;go&#xA;&#xA;&#xA;--********************************************************************--&#xA;-- Create the ETL Views&#xA;--********************************************************************--&#xA;Create View vETLDimProducts&#xA;AS&#xA; SELECT &#xA;   [ProductID] = T3.[ProductID]&#xA; , [ProductName] = Cast( T3.[Name] as nvarchar(50))&#xA; , [ProductColor] = Cast( ( CASE  &#xA;  When ( (T3.[Color] is Null) AND (T2.Name = 'Components') ) Then 'Per Bike'&#xA;  When ( (T3.[Color] is Null) AND (T2.Name = 'Accessories') ) Then 'Per Material'&#xA;  Else T3.[Color] &#xA;  End) as nvarchar(50))&#xA; , [ProductSize] = Cast( IIF(T3.[Size] is Null, 'One Size Only', T3.[Size])  as nvarchar(50))&#xA; , [ProductSellingStartDate] = T3.SellStartDate&#xA; , [ProductSellingEndDate] =  IsNull( T3.SellEndDate ,'9999-12-31')&#xA; , [ProductSellingEndDateText] = IsNull(T4.NullStatusName, T3.SellEndDate) &#xA; , [ProductCategoryID] = T1.[ProductCategoryID]&#xA; , [ProductCategoryName] = T1.[Name]&#xA; , [ParentProductCategoryName] = T2.Name&#xA; FROM [AdventureWorksLT2012].[SalesLT].[ProductCategory] as T1&#xA; JOIN [AdventureWorksLT2012].[SalesLT].[ProductCategory] as T2&#xA;   ON T1.ParentProductCategoryID = T2.ProductCategoryID &#xA; JOIN [AdventureWorksLT2012].[SalesLT].[Product] as T3&#xA;   ON T1.ProductCategoryID = T3.ProductCategoryID&#xA; Left JOIN [DWAdventureWorksLT2012v1].[dbo].[ETLNullStatuses] as T4&#xA;  ON  IsNull( T3.SellEndDate ,'9999-12-31') = T4.NullStatusDateKey&#xA; ;&#xA;go&#xA;&#xA;CREATE VIEW vETLDimCustomers&#xA;AS&#xA; SELECT &#xA;   [CustomerID] = [CustomerID]&#xA; , [ContactFullName] = Convert( nvarchar(200), [FirstName] + ' ' + [LastName])&#xA; , [CompanyName] = Cast( [CompanyName] AS nvarchar(200) )&#xA; , [SalesPersonAlias] = Cast( Substring( [SalesPerson], PatIndex( '%\%',[SalesPerson] ) + 1, 256 ) AS nvarchar(200) )&#xA; FROM [AdventureWorksLT2012].[SalesLT].[Customer]&#xA; ;&#xA;go&#xA;&#xA;CREATE VIEW vETLFactSales&#xA;AS&#xA; SELECT &#xA;   SalesOrderID = T2.SalesOrderID&#xA; , SalesOrderDetailID = T1.SalesOrderDetailID&#xA; , OrderDateKey = T6.CalendarDateKey&#xA; , ShipDateKey = T5.CalendarDateKey&#xA; , CustomerKey = T4.CustomerKey&#xA; , ProductKey = T3.ProductKey&#xA; , OrderQty = T1.OrderQty&#xA; , UnitPrice = T1.UnitPrice&#xA; , UnitPriceDiscount = T1.UnitPriceDiscount&#xA; FROM  [AdventureWorksLT2012].SalesLT.SalesOrderDetail as T1&#xA; JOIN [AdventureWorksLT2012].SalesLT.SalesOrderHeader as T2&#xA;   ON T1.SalesOrderID = T2.SalesOrderID&#xA; JOIN DWAdventureWorksLT2012v1.dbo.DimProducts as T3&#xA;  ON T1.ProductID = T3.ProductID&#xA; JOIN DWAdventureWorksLT2012v1.dbo.DimCustomers as T4&#xA;  ON T2.CustomerID = T4.CustomerID&#xA; JOIN DWAdventureWorksLT2012v1.dbo. DimDates as T5&#xA;  ON Cast(T2.ShipDate as date) = Cast(T5.CalendarDate as date)&#xA; JOIN DWAdventureWorksLT2012v1.dbo. DimDates as T6&#xA;  ON Cast(T2.OrderDate as date) = Cast(T6.CalendarDate as date)&#xA; ;&#xA;go&#xA;&#xA;&#xA;--********************************************************************--&#xA;-- Create the ETL Stored Procedures&#xA;--********************************************************************--&#xA;&#xA;-- DimProducts ETL processing code --&#xA;CREATE  &#xA;PROCEDURE pETLDimProducts&#xA;AS&#xA; /**************************************************************&#xA; Desc: &lt;Desc Goes Here&gt;&#xA; ChangeLog: When, Who, What&#xA; 20160101,RRoot,Created Procedure  &#xA; **************************************************************/&#xA;Begin -- Procedure Code&#xA; Declare &#xA;   @RC int = 0;&#xA; Begin Try &#xA;  Begin Transaction; &#xA;  -- ETL Code  -------------------------------------------------------------------&#xA;   INSERT INTO [dbo].[DimProducts]&#xA; ( [ProductID]&#xA; , [ProductName]&#xA; , [ProductColor]&#xA; , [ProductSize]&#xA; , [ProductSellingStartDate]&#xA; , [ProductSellingEndDate]&#xA; , [ProductSellingEndDateText] &#xA; , [ProductCategoryID]&#xA; , [ProductCategoryName]&#xA; , [ParentProductCategoryName]&#xA; )&#xA; SELECT &#xA;   [ProductID] &#xA; , [ProductName] &#xA; , [ProductColor] &#xA; , [ProductSize] &#xA; , [ProductSellingStartDate] &#xA; , [ProductSellingEndDate] &#xA; , [ProductSellingEndDateText]&#xA; , [ProductCategoryID] &#xA; , [ProductCategoryName] &#xA; , [ParentProductCategoryName]&#xA; FROM DWAdventureWorksLT2012v1.dbo.vETLDimProducts&#xA; ;&#xA;   -- ETL Code  -------------------------------------------------------------------&#xA;  Commit Transaction;&#xA;  Set @RC = 100; -- Success&#xA; End Try&#xA; Begin Catch&#xA;  Rollback Tran;&#xA;  Set @RC = -100; -- Failure&#xA; End Catch&#xA; Return @RC;&#xA;End -- Procedure Code&#xA;;&#xA;go&#xA;&#xA;-- DimCustomers ETL processing code -- &#xA;CREATE &#xA;PROCEDURE pETLDimCustomers&#xA;AS&#xA; /**************************************************************&#xA; Desc: &lt;Desc Goes Here&gt;&#xA; ChangeLog: When, Who, What&#xA; 20160101,RRoot,Created Procedure  &#xA; **************************************************************/&#xA;Begin -- Procedure Code&#xA; Declare &#xA;   @RC int = 0;&#xA; Begin Try &#xA;  Begin Transaction; &#xA;  -- ETL Code  -------------------------------------------------------------------&#xA; INSERT INTO [DWAdventureWorksLT2012v1].[dbo].[DimCustomers]&#xA; ( [CustomerID]&#xA; , [ContactFullName]&#xA; , [CompanyName]&#xA; , [SalesPersonAlias]&#xA; )&#xA; SELECT &#xA;   [CustomerID]&#xA; , [ContactFullName]&#xA; , [CompanyName]&#xA; , [SalesPersonAlias]&#xA; FROM DWAdventureWorksLT2012v1.dbo.vETLDimCustomers&#xA; ;  &#xA;  -- ETL Code  -------------------------------------------------------------------&#xA;  Commit Transaction;&#xA;  Set @RC = 100; -- Success&#xA; End Try&#xA; Begin Catch&#xA;  Rollback Tran;&#xA;  Set @RC = -100; -- Failure&#xA; End Catch&#xA; Return @RC;&#xA;End -- Procedure Code&#xA;;&#xA;go&#xA;&#xA;-- FactSales ETL processing code -- &#xA;CREATE&#xA;PROCEDURE pETLFactSales&#xA;AS&#xA; /**************************************************************&#xA; Desc: &lt;Desc Goes Here&gt;&#xA; ChangeLog: When, Who, What&#xA; 20160101,RRoot,Created Procedure  &#xA; **************************************************************/&#xA;Begin -- Procedure Code&#xA; Declare &#xA;   @RC int = 0;&#xA; Begin Try &#xA;  Begin Transaction; &#xA;  -- ETL Code  -------------------------------------------------------------------&#xA;     INSERT INTO [dbo].[FactSales]&#xA; ( [SalesOrderID]&#xA; , [SalesOrderDetailID]&#xA; , [OrderDateKey]&#xA; , [ShipDateKey]&#xA; , [CustomerKey] &#xA; , [ProductKey] &#xA; , [OrderQty]&#xA; , [UnitPrice]&#xA; , [UnitPriceDiscount]&#xA; ) &#xA; SELECT &#xA;   SalesOrderID&#xA; , SalesOrderDetailID&#xA; , OrderDateKey&#xA; , ShipDateKey&#xA; , CustomerKey&#xA; , ProductKey&#xA; , OrderQty&#xA; , UnitPrice&#xA; , UnitPriceDiscount&#xA; FROM DWAdventureWorksLT2012v1.dbo.vETLFactSales&#xA; ; &#xA;  -- ETL Code  -------------------------------------------------------------------&#xA;  Commit Transaction;&#xA;  Set @RC = 100; -- Success&#xA; End Try&#xA; Begin Catch&#xA;  Rollback Tran;&#xA;  Set @RC = -100; -- Failure&#xA; End Catch&#xA; Return @RC;&#xA;End -- Procedure Code&#xA;;&#xA;go &#xA;&#xA;Select 'Version 1 of the database was created';" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="288,42"
          Id="Package\RESET THE DW Database Execute SQL Task"
          TopLeft="177,94" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>