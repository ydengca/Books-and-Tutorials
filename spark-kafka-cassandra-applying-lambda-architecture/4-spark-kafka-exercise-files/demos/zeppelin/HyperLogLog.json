{"paragraphs":[{"text":"%dep\nz.load(\"com.twitter:algebird-core_2.11:0.11.0\")","dateUpdated":"2016-09-03T05:48:20-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":false,"editorHide":false},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1472457471366_-131476962","id":"20160731-053910_1455978760","dateCreated":"2016-08-29T03:57:51-0400","dateStarted":"2016-09-03T04:48:11-0400","dateFinished":"2016-09-03T04:48:15-0400","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2429"},{"text":"  case class Activity(timestamp_hour: Long,\r\n                      referrer: String,\r\n                      action: String,\r\n                      prevPage: String,\r\n                      page: String,\r\n                      visitor: String,\r\n                      product: String,\r\n                      inputProps: Map[String, String] = Map()\r\n                     )\r\n  case class ActivityByProduct (product : String,\r\n                                timestamp_hour : Long,\r\n                                purchase_count : Long,\r\n                                add_to_cart_count : Long,\r\n                                page_view_count : Long)\r\n\r\n  case class VisitorsByProduct (product : String, timestamp_hour : Long, unique_visitors : Long)","dateUpdated":"2016-09-03T05:48:22-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1472457471378_-123781984","id":"20160731-053910_896529239","dateCreated":"2016-08-29T03:57:51-0400","dateStarted":"2016-09-03T05:48:22-0400","dateFinished":"2016-09-03T05:49:51-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2430"},{"text":"import org.apache.spark.streaming._\r\n\r\n@transient val ssc = new StreamingContext(sc, Seconds(4))\r\nssc.checkpoint(\"hdfs://lambda-pluralsight:9000/spark/checkpoint\")","dateUpdated":"2016-09-03T05:48:25-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1472457471379_-124166733","id":"20160731-053910_1385258840","dateCreated":"2016-08-29T03:57:51-0400","dateStarted":"2016-09-03T05:48:25-0400","dateFinished":"2016-09-03T05:49:57-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2431"},{"text":"val inputPath = \"file:///vagrant/input\"\r\nval textDStream = ssc.textFileStream(inputPath)\r\nval activityStream = textDStream.transform( input => {\r\n  input.flatMap{ line =>\r\n    val record = line.split(\"\\\\t\")\r\n    val MS_IN_MIN = 1000 * 60\r\n    if (record.length == 7)\r\n      Some(Activity(record(0).toLong / MS_IN_MIN * MS_IN_MIN, record(1), record(2), record(3), record(4), record(5), record(6)))\r\n    else\r\n      None\r\n  }\r\n} ).cache()","dateUpdated":"2016-09-03T05:48:27-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1472457471379_-124166733","id":"20160731-053910_534575422","dateCreated":"2016-08-29T03:57:51-0400","dateStarted":"2016-09-03T05:49:51-0400","dateFinished":"2016-09-03T05:50:03-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2432"},{"text":"  import com.twitter.algebird.{HyperLogLogMonoid, HLL}\r\n  import org.apache.spark.streaming.State\r\n  \r\n  case object functions {\r\n      def mapVisitorsStateFunc = (k: (String, Long), v: Option[HLL], state: State[HLL]) => {\r\n        val currentVisitorHLL = state.getOption().getOrElse(new HyperLogLogMonoid(12).zero)\r\n        val newVisitorHLL = v match {\r\n          case Some(visitorHLL) => currentVisitorHLL + visitorHLL\r\n          case None => currentVisitorHLL\r\n        }\r\n        state.update(newVisitorHLL)\r\n        val output = newVisitorHLL.approximateSize.estimate\r\n        output\r\n      }\r\n  }","dateUpdated":"2016-09-03T05:48:30-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1472457471385_-128014222","id":"20160731-053910_91790711","dateCreated":"2016-08-29T03:57:51-0400","dateStarted":"2016-09-03T05:49:57-0400","dateFinished":"2016-09-03T05:50:07-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2433"},{"text":"  import com.twitter.algebird.{HyperLogLogMonoid, HLL}\r\n  import org.apache.spark.streaming.State\r\n  \r\n      // unique visitors by product\r\n      @transient val visitorStateSpec =\r\n        StateSpec\r\n        .function(functions.mapVisitorsStateFunc)\r\n        .timeout(Minutes(120))\r\n\r\n      @transient val statefulVisitorsByProduct = activityStream.map( a => {\r\n        ((a.product, a.timestamp_hour), new HyperLogLogMonoid(12)(a.visitor.getBytes))\r\n      } ).mapWithState(visitorStateSpec)\r\n\r\n      val visitorStateSnapshot = statefulVisitorsByProduct.stateSnapshots()\r\n      visitorStateSnapshot.cache()\r\n      visitorStateSnapshot\r\n//        .reduceByKeyAndWindow(\r\n//          (a, b) => b,\r\n//          (x, y) => x,\r\n//          Seconds(28)\r\n//        ) // only save or expose the snapshot every x seconds\r\n        .foreachRDD{ rdd =>\r\n          val df = rdd\r\n            .map(sr => VisitorsByProduct(sr._1._1, sr._1._2, sr._2.approximateSize.estimate))\r\n            .toDF()\r\n  \r\n          df.registerTempTable(\"VisitorsByProductHLL\")\r\n          sqlContext.cacheTable(\"VisitorsByProductHLL\")\r\n      }\r\n      \r\n    // Calculate precise uniques for comparision by keeping entire state in memory\r\n      activityStream.map ( a => {\r\n        ((a.product, a.timestamp_hour), a.visitor)\r\n      } ).updateStateByKey((newItemsPerKey: Seq[String], currentState: Option[(Long, Seq[String])]) => {\r\n        val (prevTimestamp, prevVisitorList) = currentState.getOrElse((System.currentTimeMillis(), List[String]()))\r\n        var result : Option[(Long, Seq[String])] = null\r\n\r\n        if (newItemsPerKey.isEmpty){\r\n          if(System.currentTimeMillis() - prevTimestamp > 1000 * 60 * 120 + 4000)\r\n            result = None\r\n          else\r\n            result = Some((prevTimestamp, prevVisitorList))\r\n        } else {\r\n          result = Some((System.currentTimeMillis(), prevVisitorList ++ newItemsPerKey))\r\n        }\r\n        result\r\n      }).foreachRDD{ rdd =>\r\n        val df = rdd\r\n          .map(sr => VisitorsByProduct(sr._1._1, sr._1._2, sr._2._2.length))\r\n          .toDF()\r\n        df.registerTempTable(\"VisitorsByProduct\")\r\n        sqlContext.cacheTable(\"VisitorsByProduct\")\r\n      }\r\n\r\nssc.start()\r\n","dateUpdated":"2016-09-03T05:48:32-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","tableHide":false,"graph":{"mode":"table","height":249,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1472457471386_-126859975","id":"20160731-053910_1338454980","dateCreated":"2016-08-29T03:57:51-0400","dateStarted":"2016-09-03T05:50:03-0400","dateFinished":"2016-09-03T05:50:23-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2434"},{"text":"%sql\nselect\n    from_unixtime(timestamp_hour / 1000, \"HH:mm:00\") as timestamphour, product, unique_visitors as unique_visitors_hll, 0 as unique_visitors_precise\nfrom VisitorsByProductHLL\nwhere product in (\"Air Wick,Dual Action Spray\", \"Gatorade,Fierce Grape\", \"Trident,Spearmint Gum\")\nunion all\nselect\n    from_unixtime(timestamp_hour / 1000, \"HH:mm:00\") as timestamphour, product, 0 as unique_visitors_hll, unique_visitors as unique_visitors_precise \nfrom VisitorsByProduct\nwhere product in (\"Air Wick,Dual Action Spray\", \"Gatorade,Fierce Grape\", \"Trident,Spearmint Gum\")","dateUpdated":"2016-09-03T05:53:36-0400","config":{"colWidth":12,"editorMode":"ace/mode/sql","tableHide":false,"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"keys":[{"name":"timestamphour","index":0,"aggr":"sum"}],"values":[{"name":"unique_visitors_hll","index":2,"aggr":"sum"},{"name":"unique_visitors_precise","index":3,"aggr":"sum"}],"groups":[{"name":"product","index":1,"aggr":"sum"}],"scatter":{"xAxis":{"name":"timestamphour","index":0,"aggr":"sum"},"group":{"name":"product","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1472457471386_-126859975","id":"20160731-053910_401923835","dateCreated":"2016-08-29T03:57:51-0400","dateStarted":"2016-09-03T05:53:36-0400","dateFinished":"2016-09-03T05:53:39-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2435"},{"text":"StreamingContext.getActive.foreach { _.stop(stopSparkContext=false, stopGracefully=true) }","dateUpdated":"2016-09-04T01:33:22-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1472457471386_-126859975","id":"20160731-053910_1863962674","dateCreated":"2016-08-29T03:57:51-0400","dateStarted":"2016-09-04T01:33:22-0400","dateFinished":"2016-09-04T01:36:02-0400","status":"ABORT","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2436"},{"text":"","dateUpdated":"2016-09-03T05:06:27-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","tableHide":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1472457471387_-143404178","id":"20160731-053910_785083267","dateCreated":"2016-08-29T03:57:51-0400","dateStarted":"2016-09-03T05:06:50-0400","dateFinished":"2016-09-03T05:06:51-0400","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:2437"}],"name":"HyperLogLog","id":"2BW4RBUW3","angularObjects":{"2BWNYNN11:shared_process":[],"2BUSDYYKT:shared_process":[],"2BWSGTUPW:shared_process":[],"2BWU6HYPM:shared_process":[],"2BVAPTGUG:shared_process":[],"2BWUBB1VP:shared_process":[],"2BW6CXMBY:shared_process":[],"2BV4PX6B9:shared_process":[],"2BV6AB1D1:shared_process":[],"2BWXF5UXU:shared_process":[],"2BWGQ459A:shared_process":[],"2BWVEP8DM:shared_process":[],"2BVZP3C2E:shared_process":[],"2BW119W4H:shared_process":[],"2BU4UEHEY:shared_process":[],"2BUTE2D9V:shared_process":[],"2BU9D6U2X:shared_process":[],"2BUFBQENP:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}